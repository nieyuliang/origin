关于JS数组常用方法的剖析
数组也是对象数据类型的，也是由键值对组成的

var ary=[12,23,34];

结构：
0:12
1:23
2:34
length:3
1、以数字作为索引（属性名），索引从零开始递增
2、有一个length 属性存储的是数组长度

ary[0] 获取第一项
ary[ary.length-1]获取最后一项

数组中每一项的值可以是任何数据类型的

 //=>多维数组

var ary =[
   {
     name:'xxx',
     age:20
  },
{
     name:'xxx',
     age:20
  },
]

数组中的常用方法
--》按照四个维度记忆；
》方法的作用
》方法的参数
》方法的返回值
》原有数组是否改变

--------------
push
作用：向数组“末尾”追加新的内容
参数：追加的内容（可以是一个，也可以是多个）
返回值：新增后数组的长度
原有数组改变
JavaScript
var ary=[12,23,34];
ary.push(100);//=>4 ary:[12,23,34,100]

ary.push(100,{name:'xxx'});//=>6 

ary:[12,23,34,100,100,{...}]

---------------------
pop

作用：删除数组最后一项
参数：无
返回：被删除的那一项内容
原有数组改变
var ary=[12,23,34];
ary.pop()
 34
ary =>[12,23]

------------
shift
作用：删除数组中的第一项
参数：无
返回：被删除的那一项内容
原有数组改变

基于shift删除数组中的第一项，第一项被删除后，原有后面的每一项的索引都要向前减1（往前提一位）

---------------
unshift
作用：向数组开始位置追加新内容
参数：要新增的内容
返回:新增后数组的长度
原有数组改变
-----------
splice
基于splice可以对数组进行很多的操作：删除指定位置的内容、向数组指定位置增加内容、还可以修改指定位置的信息

删除：ary.splice(n,m)从索引n开始，删除m个内容，把删除的部分以一个新数组返回，原有数组改变

如果不指定m或者删除的个数大于最大长度，都是删除到数组的末尾


新增：ary.splice(n,0,x,...)
从索引n开始删除零项（没有删除），把X或者更多需要插入的内容存放到数组中索引N的前面
因为一项都没有删除，所以返回的是空数组[]

修改：ary.splice(n,m,x,...)
修改的原理就是把原有内容删除掉，然后用新的内容替换这部分信息即可

//=》删除最后一项
ary.pop()
ary.splice(ary.length-1)
ary.length-- 
不建议基于delete删除数组中的某一项，虽然内容没有了，但是数组的length长度没有改变
//=>向数组末尾追加新内容
ary.push(100)
ary.splice(ary.length,0,100)
ary[ary.length]=100;

---------------
slice
作用：在一个数组中，按照条件查找出其中的部分内容
参数：两个参数（n/m）,从索引n开始，找到索引m处，但是不包含m

返回：以一个新数组储存查找的内容

ary.slice(2) 如果不写m，则查找到数组末尾
ary.slice(0)
或者ary.slice() 实现数组的克隆：克隆一个新的数组出来，和原有数组内容一样，但是不是相同的堆内存空间，两个数组是不相等独立的
原有数组不会变

ary.slice(-3,-1)支持负数索引，负数运算规则：数组总长度+负数索引
---------------------
concat
作用：实现多个数组（或者值）的拼接
参数：数组或者值
返回：拼接后的新数组
原有数组不变

[].concat(ary2,ary1,'zhufeng',ary3)
可以基于空数组作为拼接的开始，在小括号中排列拼接的顺序，空数组不会占据内容的位置

--------------------
toString
作用：把数组转换为字符串
参数：无
返回：数组中的每一项用逗号分隔的字符串
原有数组不变
----------------
join
作用：和toString类似，也是把数组转换为字符串，但是我们可以设置变为字符串后，每一项之间的连接符
参数：指定的连接符
原有数组不变

ary.join('+')
=>"12+23+34+45"
eval(ary.join('+'))
=>114
基于join我们可以实现数组中每一项求和的功能
1、基于join，使用+作为分隔符，先把数组变为每一项相加的字符串
2、基于eval,把字符串变为JS表达式执行，得到的结果就是数组中每一项累加的和

--------------
reverse
作用：把数组倒过来排列
参数：无
返回：排列后的新数组
原有数组改变

---------------
sort
作用：给数组排序
参数：无/函数
返回：排序后的新数组
原有数组改变

=》sort 在不传递参数的情况下，只能处理10以内数字排序
var ary=[1,3,2,4,5,6,7,9,8]

ary.sort();=>[1,2,3,4,5,6,7,8,9]

var ary=[18,1,23,27,2,35,3,56];
ary.sort();=>[1,18,2,23,27,3,35,56]
没有按照我们想象中的排序

//=>真实项目中，基于sort排序，我们都需要传递参数

var ary=[18,1,23,27,2,35,3,56];
ary.sort(function (a,b){

     return a-b;//=>升序
     return b-a ;//=>降序
})；
---------------------
indexOf /lastIndexOf
这两个方法不兼容IE低版本浏览器（IE6-8）
作用：检测当前值在数组中第一次或者最后一次出现位置的索引
参数：要检测的值
返回：索引
原有数组不变

基于indexOf检测，如果数组中有一项，返回一个大于等于零的索引
如果没有这一项，返回的索引为-1

//=>验证数组中是否包含某一项
if (ary.indexOf(100)>-1){
   //=>ary中包含100这一项
}


在JS中关于字符串的一些细节知识
》在JS中所有用单引号或者双引号包起来的都是字符串，每一个字符串是由零到多个字符组成

、、、javascript
var str = 'zhufengpexun';
str.length->字符串长度
str[0]->'z'
str[str.length-1] ->'n'
str[100] ->undefined
 
字符串中的每一个字符都有一个自己对应位置的索引，也有类似于数组一样的length代表自己的长度

//=>循环遍历字符串，输出每一项字符
for(var i=0;i<str.length;i++){

     cosole.log(str[i]);
}
===============
关于字符串中常用的方法
字符串是基本数据类型，字符串的每一次操作都是值直接的进行操作，不像数组一样是基于空间地址来操作的，所以不存在原有字符串是否改变这一说，肯定都是不变的
-------------------
charAt/charCodeAt
作用：charAt根据索引获取指定位置的字符，charCodeAt不仅仅获取字符，它获取的是字符对应的Unicode编码值（ASCII）
参数：索引
返回：字符或者对应的编码

、、、
str[100]  => undefined
str.charAt(100) =>''
和直接操作索引方式获取的区别：
1、当索引不存在的时候，str[x]获取的结果是undefined,运行的机制和对象是一样的，而charAt(x)获取的结果是空字符串


var str = 'zhufengpeixun';

str.charCodeAt(0)  =>122

String.fromCharCode(122) =>'z'

chaCodeAt返回的是字符对应的编码
fromCharCode 返回的是编码对应的字符

-------------
indexOf/lastIndexOf
基于这两个方法，可以获取字符在字符串中第一次或者最后一次出现位置的索引，有这个字符，返回大于等于零的索引，不包含这个字符，返回的结果是-1，所以可以基于这两个方法，验证当前字符串是否包含某个字符
--------------------
slice
作用：str.slice(n,m)从索引n开始找到索引为m处（不包含m），把找到的字符当做新字符串返回


和数组中的slice操作是一样的
1、不写m是查找到字符串的末尾
2、n和m都不写是字符串的克隆
3、支持负数索引：用字符串的总长度+负数索引做运算
-----------------
substring

和slice语法一模一样，唯一的区别在于：slice支持负数索引，而substring不支持负数索引

------------------、、、、
substr
也是字符串截取的方法，用法是：
str.substr(n,m),从索引n开始截取m个字符

和substring一样，第二个参数不传，截取到末尾，但是它支持第一个索引为负数，负数也是总长度+负数索引

------------
toUpperCase/toLowerCase
实现字母的大小写转换，toUpperCase小写转大写
toLowerCase大写转小写

var str = 'NiHao'

str.toLowerCaseO  =>nihao

str.toUpperCase()  =>NIHAO

--------------------\
split
和数组中的join相对应，数组中的join是把数组每一项按照指定的连接符变为字符串，而split是把字符串按照指定的分隔符，拆分成数组中每一项
var ary=[12,23,34];
ary.join('+') =>  "12+23+34"

var str=“12+23+34”；
str.split（‘+’） =》["12","23","34"]
------------------------
replace
作用：替换字符串中的原有字符
参数：原有字符，要替换的新字符
返回：替换后的字符串

把“zhufeng”替换为“珠峰”
var str = 'zhufeng2016zhufeng2018';
str = str.replace('zhufeng','珠峰');
//=》在不使用正则的情况下，每执行一次replace只能替换一个“珠峰2016zhufeng2018”


=========================
JS中的数学函数Math
Math称为数学函数，但是它属于对象类型的

typeof Math =>'object'

之所以叫做数学函数，是因为Math这个对象中提供了很多操作数字的方法

Math中提供的常用方法

abs:取绝对值

 Math.abs(10) =>10
 Math.abs(-10) =>10


-----------------

ceil/floor 向上取整数或者向下取整数

Math.ceil(10)  =》10

Math.ceil(10.01)  =》11

Math.ceil(-10.01)  =》-10

Math.floor(10.99) =》10
Math.floor(-10.99) =》11

--------------------------
round :四舍五入

Math.round(10.49) =>10

Math.round(10.5) =>11

Math.round(-10.49) =>-10

Math.round(-10.5) =>-10

Math.round(-10.51) =>-11

-------------------
sqrt:开平方

Math.sqrt（100） =》10


Math.sqrt（10） =》3.16227


Math.sqrt（16） =》4

-------------------------
pow:取幂（N的M次方）

Math.pow(2,10)  =》1024  2的10次方

--------------------

max/min :获取最大值和最小值
 
Math.max（12,23,34,24,26,13） =》34

Math.min（12,23,34,24,26,13） =》12

-----------------
PI：获取圆周率
Math.PI =>3.1415926

--------------------
random :获取0~1之间的随机小数

Math.round(Math.random()*(m-n)+n);
获取n-m之间的随机整数












 















































