for循环
作用：按照一定的规律，重复去做某件事情，此时我们就需要使用循环来处理了

输入itar按一个TAB键自动补全for循环（webstrom）

for (var i=0;i<ary.leng;i++){
//=>第一次循环：i=0 i<3....i=1 =>ary[0]
//=>第二次循环: i=1 i<3....i=2 =>ary[1]
//=>第三次循环: i=2 i<3....i=3 =>ary[2]
//=>第四次循环: i=3 i<3 循环结束（本次没有循环）

console.log(ary[i]);
}
for循环的语法组成
1、定义初始值 var i=0
2、设定循环成立的条件（条件成立循环继续，不成立循环结束）i<ary.length
3、条件成立会执行循环体中的内容（大括号包裹的就是循环体）
4、执行步长累加的操作

var ary=[12,23,34];
//=>输出每一项：倒着输出  34 23 12 
//=>ary.length-1:当前数组中最后一项的属性名（索引）
for(var i=ary.length-1;i>=0;i--){
    console.log(ary[]);
}


输出数组中的内容：输出奇数项的内容

for(var i=0;i<ary.length;i++){
   /i=0 第一项  奇数项
   i=1  第二项  偶数项
   i=2   第三项  奇数项
   索引为偶数，代表的是奇数项，如何判断当前i的值是奇数还是偶数？
   12%5：%称为模，用12除以5取余数
   
 if（i%2===0）{
   console.log(ary[i]);
}
或者第二种方法

for(var i=0;i<ary.length;i+=2){
   console.log(ary[i]);
}
}
-------------
在for循环的循环体中，经常出现两个常用的关键字：
1、continue: 继续
2、break: 中断或者结束

for(var i=0;i<10;i++){
  if(i<5){
     i++;
     continue;//=>结束本轮循环（循环体中continue后面代码将不再执行），继续执行下一轮循环

}
   if ( i>7){  //=>答案为9
     i+=2;
     break;//到此结束，for里面的i++也不在继续了，整个循环体结束
}
    i+=3;
}
----------------------------------
for(var i=1;i<=10;i+=2){
   if(i<=5){
     i++;
     continue;
}else{
      i-=2;
      break;
}
 i--;
  console.log(i);

}
 console.log(i);==>最后答案5

-------------------------------------
text-overflow:ellipsis;多余的裁切，以...显示方式
white-space:nowrap;强制不换行
overflow:hidden:超出隐藏
--------------------
三个缺一不可（每行超出的以省略号显示）
--------------------------
cursor:pointer;鼠标显示小手状态
----------------------------

css元素

：nth-child(n):当前容器所有子元素中的第n个

例如：.box li:nth-child(1)：box容器所有子元素中的第一个并且标签名必须是li才起作用，否则不起作用
<style>
.box li:nth-child(1){
     color:red;
}
</style>
<body>
<ul class="box">
   <span> 我是累赘</span>//=>ul中所有的元素第一个但不是Li标签  所有不起作用
    <li>我是元素<li>
    <li>我是元素<li>
     <li>我是元素<li>

------------------------------
  :nth-of-type(n):先给当前容器按照某一个标签名进行分组，获取分组中的第n个 

.box li:nth-of-type(1):先获取box中所有的li,在获取li中的第一个


----------------------------------------
获取页面中的DOM元素
document.getElementById
>在整个文档中，通过元素的ID属性值，获取到这个元素对象

》getElementById是获取元素的方法，而document限定了获取元素的范围，我们把这个范围称之为：“上下文[context]”
---------------------------------------------
html中的代码
<ul class="box" id="box">
//id值为在JS中调取
-----------------------------------
js代码
//=>1、获取box中所有的Li（我们需要先获取box）
var oBox = document.getElementById('box');
//=>想要修改BOX的样式
//1、通过style修改行内样式

oBox.style.backgroundColor='pink';

//2、基于class-name属性修改box样式类，从而改变样式
第一种方法：oBox['className']='box  bgColor';
第二种方法：oBox['className']+=‘（加上空格）  bgColor’;
//=》实际相当于在box里添加了一个类选择器来改变样式



-----------------------------------
javascript

var oBox = document.getElementById('box');

1、通过getElementById获取的元素是一个对象数据类型的值（里面包含很多内置的属性）
 typeof oBox =>"object"


2、分析包含的属性

className:存储的是一个字符串，代表当前元素的样式类名

id:存储的是当前元素ID值（字符串）

innerHTML:储存当前元素中所有的内容（包含HTML标签）


innerText:存储当前元素中所有的文本内容（没有元素标签）

onclick:元素的一个事件属性，基于这个属性，可以给当前元素绑定点击事件

onmouseover:鼠标滑过事件

onmouseout:鼠标离开事件

style:存储当前元素所有的“行内样式”值（获取和操作的都是只能是写在标签上的行内样式，写在样式表中的样式，无法基于这个属性获取到）
--------------------
[context].getElementsByTagName
>在指定的上下文中，通过元素的标签名获取一组元素集合
》上下文是我们自己来指定的
--------------------------
//=>1、获取box中所有的Li（我们需要先获取box）

var oBox = document.getElementById('box');

var boxList = oBox.getElementsByTagName('li');

1、获取的结果是一个元素集合（HTMLCollection）,首先它也是对象数据类型的，结构和数组非常相似（数字作为索引，length代表长度），但是不是数组，我们把它叫做“类数组”

boxList[0]获取当前集合中的第一个li(通过索引获取到具体的某一个Li即可)

boxList.length  获取集合中Li的数量

2、集合中的每一项存储的值又是一个元素对象（对象数据类型，包含很多的内置属性，例如：id/className....）

boxList[1].style.color=‘red’；修改集合中第二个Li的文字颜色

--------------------------------------
隔行变色代码
for(var i=1;i<boxList.length;i+=2){
   boxList[1].style.backgroundColor='red';
}

----------------------------------
函数
>在js中，函数就是一个方法（一个功能体），基于函数一般都是为了实现某个功能

这样的方式会导致页面中存在大量的代码，也降低了开发的效率，如果我们能把实现这个功能的代码进行“封装”，后期需要这个功能执行即可，这样就
好了！

##函数诞生的目的就是为了实现封装：把实现一个功能的代码封装到一个函数中，后期想要实现这个功能，只需要把函数执行即可，不必要再次编写重复代码，起到了 低耦合高内聚（减少页面中的冗余代码，提高代码的重复使用率）的作用。

-------------javascript

function fn(){
  var  total=10;
      total+=10;
    total/=2;
    total=total.tofixed(2);
     console.log(total);
}
fn();
fn();=>想用多少次就执行多少次这个函数就可以了
--------------------------------
ES3标准中：
function 函数名（[参数]）{

    函数体：实现功能的JS代码
}

//=>函数执行
函数名（）；

-----------------------
ES6标准中创建箭头函数：

let  函数名（变量名）=（[参数]）=>{

      函数体
}
 
函数名（）；=》执行

let fn=()=>{

   let total=10;
};

fn();
---------------------------------

函数作为引用数据类型中的一种，它也是按照引用地址来操作的，接下来，我们学习一下，函数的运行机制

【创建函数】
1、函数也是引用类型，首先会开辟一个新的堆内存，把函数体中的代码当做“字符串”存储到内存中（对象向内存中存储的是键值对）

2、把开辟的堆内存地址赋值给函数名（变量名）


此时我们输出fn(切记不是fn())代表当前函数本身
如果我们执行fn(),这是把函数执行

所以是否加小括号是两种不同本质的操作













